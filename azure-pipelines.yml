trigger:
  - main
  - feature/*
  - bugfix/*
  - release/*

pool:
  vmImage: "ubuntu-latest"

variables:
  # Node.js version
  nodeVersion: "18.x"

  # Environment variables
  dev_port: 3000
  qa_port: 3001
  staging_port: 3002
  prod_port: 3003

  # Build artifact
  buildArtifactName: "app-build"

stages:
  - stage: CI
    displayName: "Continuous Integration"
    jobs:
      - job: Build
        displayName: "Build and Test"
        steps:
          # Checkout source code
          - checkout: self
            displayName: "Checkout source code"

          # Setup Node.js
          - task: NodeTool@0
            displayName: "Install Node.js"
            inputs:
              versionSpec: $(nodeVersion)

          # Install dependencies
          - script: |
              npm ci
            displayName: "Install dependencies"

          # Lint code
          - script: |
              npm run lint
            displayName: "Run ESLint"
            continueOnError: true

          # Run tests with coverage
          - script: |
              npm test
            displayName: "Run tests with coverage"

          # SonarQube Analysis
          - task: SonarQubePrepare@5
            displayName: "Prepare SonarQube Analysis"
            inputs:
              SonarQube: "SonarQube"
              scannerMode: "CLI"
              configMode: "file"

          - task: SonarQubeAnalyze@5
            displayName: "Run SonarQube Analysis"

          - task: SonarQubePublish@5
            displayName: "Publish SonarQube Results"
            inputs:
              pollingTimeoutSec: "300"

          # Archive build artifacts
          - task: ArchiveFiles@2
            displayName: "Archive app files"
            inputs:
              rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(buildArtifactName).zip"
              replaceExistingArchive: true
              excludePattern: "node_modules/**|.git/**|.gitignore|README.md|coverage/**|.vscode/**"

          # Publish build artifacts
          - task: PublishBuildArtifacts@1
            displayName: "Publish Artifact"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)"
              ArtifactName: "drop"
              publishLocation: "Container"

  - stage: DeployToDev
    displayName: "Deploy to Development"
    dependsOn: CI
    condition: succeeded()
    variables:
      - group: dev-environment-variables
    jobs:
      - job: DeployToDev
        displayName: "Deploy to Dev Environment"
        steps:
          # Download build artifact
          - task: DownloadBuildArtifacts@1
            displayName: "Download Build Artifacts"
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop"
              downloadPath: "$(System.ArtifactsDirectory)"

          # Extract the artifact
          - task: ExtractFiles@1
            displayName: "Extract Files"
            inputs:
              archiveFilePatterns: "$(System.ArtifactsDirectory)/drop/$(buildArtifactName).zip"
              destinationFolder: "$(System.DefaultWorkingDirectory)/app"
              cleanDestinationFolder: true

          # Install dependencies for deployment
          - script: |
              cd $(System.DefaultWorkingDirectory)/app
              npm ci --production
            displayName: "Install Production Dependencies"

          # Copy environment configuration
          - task: CopyFiles@2
            displayName: "Copy Environment Configuration"
            inputs:
              SourceFolder: "$(System.DefaultWorkingDirectory)"
              Contents: ".env.development"
              TargetFolder: "$(System.DefaultWorkingDirectory)/app"
              CleanTargetFolder: false

          # Start the application with proper environment
          - script: |
              cd $(System.DefaultWorkingDirectory)/app
              export NODE_ENV=development
              PORT=$(dev_port) node app.js &
              echo "Application deployed to Dev environment on port $(dev_port)"
              # Give it a moment to start
              sleep 5
              # Test if the application is running
              curl http://localhost:$(dev_port)
              # Run integration tests against dev environment
              npm run dev:test
              # Kill the process to not block the agent
              kill $(lsof -t -i:$(dev_port)) || true
            displayName: "Deploy and Validate Dev Environment"

          # Health check
          - script: |
              echo "Running health check..."
              curl -s http://localhost:$(dev_port)/health || exit 1
            displayName: "Health Check"
            continueOnError: false

  - stage: DeployToQA
    displayName: "Deploy to QA"
    dependsOn: DeployToDev
    condition: succeeded()
    variables:
      - group: qa-environment-variables
    jobs:
      - deployment: DeployToQA
        displayName: "Deploy to QA Environment"
        environment: "QA"
        strategy:
          runOnce:
            deploy:
              steps:
                # Download build artifact
                - task: DownloadBuildArtifacts@1
                  displayName: "Download Build Artifacts"
                  inputs:
                    buildType: "current"
                    downloadType: "single"
                    artifactName: "drop"
                    downloadPath: "$(System.ArtifactsDirectory)"

                # Extract the artifact
                - task: ExtractFiles@1
                  displayName: "Extract Files"
                  inputs:
                    archiveFilePatterns: "$(System.ArtifactsDirectory)/drop/$(buildArtifactName).zip"
                    destinationFolder: "$(System.DefaultWorkingDirectory)/app"
                    cleanDestinationFolder: true

                # Copy QA environment configuration
                - task: CopyFiles@2
                  displayName: "Copy QA Environment Configuration"
                  inputs:
                    SourceFolder: "$(System.DefaultWorkingDirectory)"
                    Contents: ".env.qa"
                    TargetFolder: "$(System.DefaultWorkingDirectory)/app"
                    CleanTargetFolder: false

                # Install dependencies
                - script: |
                    cd $(System.DefaultWorkingDirectory)/app
                    npm ci --production
                  displayName: "Install Production Dependencies"

                # Deploy to QA environment
                - script: |
                    cd $(System.DefaultWorkingDirectory)/app
                    export NODE_ENV=qa
                    PORT=$(qa_port) node app.js &
                    echo "Application deployed to QA environment on port $(qa_port)"
                    sleep 5
                    curl http://localhost:$(qa_port)/health
                    kill $(lsof -t -i:$(qa_port)) || true
                  displayName: "Deploy to QA Environment"

                # Run QA-specific tests
                - script: |
                    cd $(System.DefaultWorkingDirectory)/app
                    npm test
                  displayName: "Run QA Tests"

  - stage: DeployToStaging
    displayName: "Deploy to Staging"
    dependsOn: DeployToQA
    condition: succeeded()
    variables:
      - group: staging-environment-variables
    jobs:
      - deployment: DeployToStaging
        displayName: "Deploy to Staging Environment"
        environment: "Staging"
        strategy:
          runOnce:
            deploy:
              steps:
                # Similar steps as QA but with staging configuration
                - task: DownloadBuildArtifacts@1
                  displayName: "Download Build Artifacts"
                  inputs:
                    buildType: "current"
                    downloadType: "single"
                    artifactName: "drop"
                    downloadPath: "$(System.ArtifactsDirectory)"

                - task: ExtractFiles@1
                  displayName: "Extract Files"
                  inputs:
                    archiveFilePatterns: "$(System.ArtifactsDirectory)/drop/$(buildArtifactName).zip"
                    destinationFolder: "$(System.DefaultWorkingDirectory)/app"
                    cleanDestinationFolder: true

                - task: CopyFiles@2
                  displayName: "Copy Staging Environment Configuration"
                  inputs:
                    SourceFolder: "$(System.DefaultWorkingDirectory)"
                    Contents: ".env.staging"
                    TargetFolder: "$(System.DefaultWorkingDirectory)/app"
                    CleanTargetFolder: false

                - script: |
                    cd $(System.DefaultWorkingDirectory)/app
                    npm ci --production
                  displayName: "Install Production Dependencies"

                - script: |
                    cd $(System.DefaultWorkingDirectory)/app
                    export NODE_ENV=staging
                    PORT=$(staging_port) node app.js &
                    echo "Application deployed to Staging environment on port $(staging_port)"
                    sleep 5
                    curl http://localhost:$(staging_port)/health
                    kill $(lsof -t -i:$(staging_port)) || true
                  displayName: "Deploy to Staging Environment"

  - stage: DeployToProduction
    displayName: "Deploy to Production"
    dependsOn: DeployToStaging
    condition: succeeded()
    variables:
      - group: production-environment-variables
    jobs:
      - deployment: DeployToProduction
        displayName: "Deploy to Production Environment"
        environment: "Production"
        strategy:
          runOnce:
            deploy:
              steps:
                # Similar steps as Staging but with production configuration
                - task: DownloadBuildArtifacts@1
                  displayName: "Download Build Artifacts"
                  inputs:
                    buildType: "current"
                    downloadType: "single"
                    artifactName: "drop"
                    downloadPath: "$(System.ArtifactsDirectory)"

                - task: ExtractFiles@1
                  displayName: "Extract Files"
                  inputs:
                    archiveFilePatterns: "$(System.ArtifactsDirectory)/drop/$(buildArtifactName).zip"
                    destinationFolder: "$(System.DefaultWorkingDirectory)/app"
                    cleanDestinationFolder: true

                - task: CopyFiles@2
                  displayName: "Copy Production Environment Configuration"
                  inputs:
                    SourceFolder: "$(System.DefaultWorkingDirectory)"
                    Contents: ".env.production"
                    TargetFolder: "$(System.DefaultWorkingDirectory)/app"
                    CleanTargetFolder: false

                - script: |
                    cd $(System.DefaultWorkingDirectory)/app
                    npm ci --production
                  displayName: "Install Production Dependencies"

                - script: |
                    cd $(System.DefaultWorkingDirectory)/app
                    export NODE_ENV=production
                    PORT=$(prod_port) node app.js &
                    echo "Application deployed to Production environment on port $(prod_port)"
                    sleep 5
                    curl http://localhost:$(prod_port)/health
                    kill $(lsof -t -i:$(prod_port)) || true
                  displayName: "Deploy to Production Environment"
